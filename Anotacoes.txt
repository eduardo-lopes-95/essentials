Ch2
constantes 
	são valores que não são alterados durante o programa
	podem ser usados na main, em outras funções, escopo global
	são declaradas com a keyword static
	nomes devem ser em letras maiusculas
	nomes separadas por underline caso sejam composto
	compilador não infere o tipo, portanto é preciso declarar um tipo

Tipos de dados
	Caracteres são valores unicode que ocupam 4 bytes de memória
	Vazio ou () -> valor unitário, equivalente ao null em outras linguagens
	bingind = receber
	(_) underline é usado para evitar avisos de que uma variável não esta sendo usada
	variáveis em rust são imutáveis
	mut (mutavel) = permite que uma variável tenha seu valor alterado
	let n = 42u8 / 42_u8 -> n recebe (binding) valor 42 do tipo using de 8 bit
	//let p12 = p1 + p2; não é possível concatenar referência de memória 
	let _p12 = p1.to_string() + p2;
	let p3 = format!("{} {}", p1, p2); 
	é possível fazer casting (conversões) com "as"
	alias (apelido) é possível com type. Ex: type magic = u16;
	
	rust é uma linguagem orientada a expressões, que são partes de código, como funções ou blocos {},
	(observação!!! no caso de funções com retorno tipado,
	temos dois tipos de saída: return algo; | algo 
	>>>> a 1ª forma não é um idiomatic code (jeito que a linguagem faz algo))

	Um bloco de código é uma expressão que retorna o *valor da última expressão*
	caso for otimido o ponto e virgula (;), caso seja inserido, o retorno será vazio/()

	& referencia o endereço de memória de onde algo esta guardado, ou seja, é um ponteiro
	
	valores na stack podem ser alocados na heap

--------------------------------------------------------------------------------------------------------

Ch3

if, if else, if let
	rust não tem o recurso de ternário
	alternativa: let age = if adult {"+18"} else {"-18"};

looping
	while
	loop
	for in

function
	em Rust não há problemas em colocar outras funções antes ou depois do main,
	porém é mais legível coloca-lá no topo do código.
	após -> é especificado o tipo de retorno de uma função
	o retorno de uma função é o valor da ultima expressão
	se você tiver mais de um valor para retornar, coloque dentro de uma tupla
	funções tem tipo. Ex: fn foo(i32) -> i32

attributes
	#[...] -> representam metadados sobre o código. 
	Ex: 
	*** podem evitar avisos
		#[warn(unused_variables)]

	*** ativar recursos de compilação

	*** benchmark code
		#[bench]

	*** compilação condicional
		ativar/desativar funções em S.O diferentes 
		#[cfg(target_os = "windows")]

	*** unit test
		#[test]

teste
	para rodar teste em Rust precisamos rodar no console `cargo test` onde o compilador vai procurar
	pelo atributo #[test] no código.
	Utilize asserts para testar o código:
		assert_eq!(actual, expect); o valor atual é igual ao esperado? 
		assert!(bool); a condição é verdadeira ou falsa? 2+3 == 5 ? true
	
	como podemos testar a falha do código?
	#[should_panic(expect = "assertion failed")]
	onde panic significa crash (quebra)
	#[test]
	#[should_panic(expected = "assertion failed")]
	fn failing_test() {
		assert!(6 == 2 + 3);
	}

	como podemos desabilitar um test?
	só colocar o atributo #[ignore]
	#[test]
	#[ignore]
	fn foo() {
		assert!(2 + 3 == 6);
	}

testar com cargo
	Qual a diferença entre lib e bin em rust? 
	
	bin é um projeto executável que contém a função main, roda através do comando cargo run
	
	lib não é um projeto executável pois contém um template de teste, roda através do comando cargo test
	
	rodar um teste -> cargo test nome_teste
	
	rodar todos os testes -> cargo test
	
	caso algum teste dependa de outro é interessante rodá-los dentro de uma mesma thread, para isso
	utilize -> cargo test -- -test-threads=1

	Modulos de teste
		testes são separados em dois tipos de aplicações:
			*** Testes unitários são escritos no modulo test no arquivo tests.rs na pasta src
			*** Teste de integração são escritos no arquivo lib.rs na pasta tests

			>> a função que vai passar pelo teste unitário fica no caminho src\lib.rs
			>> o teste unitário fica no caminho src\tests.rs
			>> o teste de integração fica no caminho tests\lib.rs
			
			Como chamar as funções da aplicação para realizar testes unitários?
			use super::*;

			Testes unitários estão contidos em módulos de test (mod test)

Ch4
	String
		Existem dois tipos de strings em Rust:
			>> string slice (&str) 
				>>> onde & é a referência para uma string
				>>> são imutáveis
				>>> tamanho fixo
					let nome1 = "Merlin";
					let nome2: &str = "Gandalf";
			
				string literal = 
					>>> armazenada diretamente no executável do programa, ou seja, é uma constante global
					>>> tem o tempo de vida da aplicação
						let nome3: &'static str = "Aragorn";
			
			>> String (buffer)
				>>> é o conjunto de caracters em si
				>>> são mutáveis
				>>> tamanho variádo
				>>> são armazenadas na Heap
				>>> toda vez que ela cresce, precisa ser realocada
					let mut str1 = String::new();

			>> Converter de slice string (&str) para String?
				>>> Utilize a função to_string()
					Ex: let mut str3 = nome1.to_string();

			>> String slice pode ser criada com a notação de range (..).
					Ex: let nome1 = "Merlin";
						let nome1_slice = &nome1[1..=2] //Mer
				
			>> Como percorrer caracter por caracter?
				>>> Utilize a função chars()
					Ex: let nome2 = "Aragorn";
						for c in nome2.chars(){
							print!("{} ",c)
						}
			>> Como adicionar sequencia de caracteres?
				>>> Utilize o método push()
					let mut str6 = String::new(); //String vazia
    				str6.push_str("Legolas"); //
					println!("{}", str6) //Legolas
			
			>> Como adicionar caracteres?
				>>> Utilize o método push()
					Ex: str6.push('s');
					println!("{}", str6) //Legolass
			
			>> Sempre que uma string for receber uma string como parametro, declare como string slice,
			   assim não precisaremos alocar na heap.
			   Ex: fn foo(s : &str) -> usize {s.len()}

			>> Como converter números em string? 
				>>> Utilize from_str
						let number1: f64 = f64::from_str("3.6")); //Ok(3.6)
					Ex: let number2: f64 = f64::from_str("3.7").unwrap(); //3.7
					O unwrap serve para acessar o conteúdo do Result (Ok)

	Array
		>> Declarando um array vazio
			Ex: let mut empty: [i32; 0] = [];
    			println!("{:?}", empty); //[]
			
		>> Declarando um array de 10 posições preenchido com zeros
			Ex: let mut empty: [i32; 10] = [0; 10]; 
				//Crie um vetor que aceite valores do tipo i32, contendo 10 posições = preenche 10 posições com 0
    			println!("{:?}", empty); //[]

		>> Acessar o tamanho do array: arr.len()
		>> Acessar a ultima posição: arr.len() - 1; 

	Vetores
		>> Há duas maneiras de declarar vetores:
			
			>>> new::()
				Ex: let mut numbers: Vec<i32> = Vec::new();
			
			>>> vec!
    			Ex: let mut magic_numbers = vec!(7i32, 42, 47, 45, 54);
			
		>>> Contruindo vetores a partir de range:
			Ex: let rgvec: Vec<i32> = (0..7).collect();
    			println!("{:?}", rgvec); //[0, 1, 2, 3, 4, 5, 6]
				Método collect serve para construir a coleção

	Higher order function 
		>>> função que recebe uma outra função como parâmetro
			pub fn again< F: Fn(i32) -> i32> (f: F, s:i32) -> i32 { f(f(s))}
			F: Fn(i32) -> i32, F é um tipo função (Fn) que recebe i32 como parâmetro, por fim, F retorna um i32

	Função Anonima
		>>> let triplo = |n| {3 * n};

	Iteradores
		>>> são objetos que retornam os itens de uma coleção em uma sequencia
		>>> são lazy por natureza, ou seja, chamado por necessidade, não geram valor a menos que sejam chamados
			let mut rng = 0..=7;
    		println!("> {:?}", rng.next());

			.iter() itera sobre um array/vetor
			
			&nome_variavel_iteradora = serve como iterador
				>>Muito mais performatico e seguro do que usar indexação.
			
			.iter().rev() inverte a ordem

	Consumers and adapters
		>>> iteradores são lazy (call-by-need) e tem que ser ativados pela invocação de quem vai consumí-los
		>>> find() = retornar o 1º valor que valida uma condição, o resultado é encapsulado por um option
		>>> filter() = retorna uma nova coleção de iteraveis a partir da coleção antiga
		>>> map() = cria um novo iterável a partir do original passando por todos os elementos
		>>> take(x) = pega x quantidade de algo																																																																																																																																
		>>> fold() = chamado de reduce ou inject, tem por objetivo reduzir a quantidade de dados
					 Necessita de dois parametros = um valor inicial e uma clojure com dois argumentos: acumulador e os elementos
					 let sum = (0..10).fold(0, |sum, n| sum + n);
	
	Generics 
		>>> Generics são chamados de "parametros poliformicos" na teoria,
		isso significa que tipos ou funções podem ter multiplas formas
		
		>>> Usar generics permite reutilizar code significativamente,
		isso significa, que o compilador ao detectar que uma função,
		struct ou enum é do tipo genérico, se responsabilizará pela criação concreta
		de determinado recurso quando um novo tipo <T> (i32, f32,...) precisar ser gerado.

		>>> Struct generic
			***fields precisam ser do mesmo tipo ao serem instanciados
				struct Point<T>{
					x: T,
					y: T,
				}

				//let point1 = Point{x:42, y:12.2}; er - tipos diferentes
				//let point2 = Point{x:42, y:12};   ok - tipos iguais
				//são de tipos iguais <T> porém qualquer (i32, f32)
				
				struct Coordination<T, U>{
					x: T,
					y: U
				}
				
				let coor1 = Coordination{x:42, y:12.2}; ok - tipos diferentes
				let coor2 = Coordination{x:42, y:12};   ok - tipos iguais
				//x é um tipo <T> qualquer
				//y é um tipo <U> qualquer

		>>> Function generic
			estudar mais
Ch6
	POO
		>>> Associated function em struct
		>>> Methods on struct
		>>> Constructor Pattern
		>>> Builder Pattern = a construção da instância é encaminhada para uma estrutura de criação de struct,
			com um construtor padrão, métodos que mudam propriedades e um método que retorna a instancia so struct original
		>>> Method on tuples and enums

	Trait
		>>> são features da linguagem análogos a interfaces / classes abstratas em POO
		>>> contém a descrição de métodos, isto é, tipo de declaração e sem corpo, pois ao ser implementada que conterá a lógica.
		>>> Curiosidade: Todas as operações (soma, subtração, divisão, multiplicação) são definidas através de
		trais, exemplo disso é a soma que é definida por std::ops::Add. Dessa forma, quando você vê o "sinal"
		de soma, na verdade, é uma sintaxe sugar de um método de uma interface (trait), o que de certa forma,
		recai sobre o conceito de abstração, sendo esse processo uma conversão que o compilador realiza.
		a + b = a.add(b);

Ch7
	Lifetime
		>>> lifetime e escopo são sinônimas
		>>> entende-se lifetime como uma extensão de uma referência
		>>> fora do escopo, determinada variável/parâmetro não existirá, a não ser que ela seja globa
		>>> quando o lifetime termina, a memória é liberada
		>>> Casos, como em funções, não é necessário declarar
			o lifetime de um parâmetro porque o compilador conhece o escopo
			da função, consequentemente, ele se apropria disso e consegue inferir
			o lifetime (escopo)
		>>> em contra partida, structs que contém referências ou funções cujos
			parâmetros são referência, é necessário indicar o lifetime
		>>> Referência inválida (dangling pointer) quando você esta retornando uma 
			referência de uma variável/parâmetro local
		>>> Lifetime elision é um mecanismo que utiliza o borrow checker para fazer
			inserção de anotações de lifetime no MIR
			(camada intermediária que faz borrow checking e otimização) automaticamente,
			é mágica.
		>>> Se for trabalhar com referência, o compilador vai pedir para indicar
			o lifetime

	Copying and moving values
		>>> Para poder copiar o conteúdo de uma variável para dentro de outra,
		tenha em mente que o ownership também será transferido, ou seja, houve uma 
		movimentação e não uma cópia. Dessa forma, ao tenta manipulá-la você receberá
		um erro dizendo que você esta tentando manipular um valor que foi movido.
		Esse mecanismo tem o objetivo de eliminar potenciais bugs, pois quando um 
		conteúdo tem somente um ownership, o valor pode ser alterado sem preocupações.
		É o mesmo caso quando você tem um filho, ao ficar na casa dos avós,
		a criança recebeu mimos e tal, quando ela volta para casa,
		certamente o comportamento já mudou.

		>>> Como tornar um valor copiável? 
		Valores primitivos (int, float, char,...) são copiáveis atráves de binding (=)
		Ex: let a:i32 = 42;
			let b = a; //42
		
		Para valores não primitivos (string, struct, enum, há duas maneira:
			*** via trait:
				Implementando trait Copy, Clone e, em seguida, método clone.

			*** via atributo:
				#[derive(Copy, Clone)]

		>>> O que significa *self?
			operador de desreferência, ou seja, é um ponteiro que retorna o valor
			de uma referência

		Obs: para printar o conteúdo de uma propriedade de um struct
		implemente o trait Debug através do atributo #[derive(Debug)]

	Pointers
		>>> São variáveis que contém o endereço de memória de algum valor que está armazenado na
		stack (tipo primitivos) ou na heap (tipos não primitivos). Como podemos acessar? atráves do
		operador de desreferência (*), ou seja, tira a referencia (&) e me devolve só o conteúdo.
		Obs: println!(), macros ou quando um ponteiro é passado como argumento para um método
		já é feita a desresferência automática.

		>>> Você sabe o que são ponteiros, mas para que eles servem?
		Imagina que você esta trabalhando com strings, um tipo não primitivo, que na verdade
		é uma cadeira de caracteres (char), tamanho variável e de alocação dinâmica, ou seja, não
		sabemos onde está o endereço de memória em tempo de compilação, então a memória tem que fazer
		um malabarismo com essa cadeira de caracteres tendo de calcular uma maneira de alocar toda essa
		informação em tempo de execução (runtime). Vamos ter em mente que a memória é como se fosse um
		armário, onde temos gavetas vazias e gavetas com alguma coisa, organizadas com alguma inteligência, 
		de forma não sequêncial, perfeito. Mas como você faria para achar a sua blusa com logotipo da Rust?
		você precisa de uma referência, isso é o ponteiro, endereço de memória como esse 0x7078eff8bc, assim
		é possível localizar. O compilador do Rust cuida da alocação do ponteiro, liberando memória quando 
		o lifetime (escopo) termina, diferente, do C/C++ onde você que cuida dessa operação.

		>>> Ao passar o valor de um ponteiro para uma função, é sempre bom usar o mecanismo de
		refêrencia-desreferência (*&) apesar de alguns artíficios como funções já utilizarem esses
		mecanismos por debaixo dos panos.

	Reference
		>>> Referência ou borrowed pointer
			mutável com mutável != imutável com imutável
			let mut u = 3.14f64;   let u = 3.14f64;
			let v = &mut u;		   let v = &u;
			*v = 3.15;			   println!("{}", v); //3.14

			Um valor mutável também pode ser alterado passando seu endereço como uma referência mutável para
			uma função.
			let mut m = 7;
			add_three_to_magic(&mut m);
			println!("m is now {}", m); // prints out m is now 10

			fn add_three_to_magic(num: &mut i32) {
				*num += 3; // value is changed in place through +=
			}

			Referências são frequentemente usadas como parâmetro de função, pois evitam movimentação,
			troca de ownership, duplicação da informação, que pode ser grande (string buffer) o que 
			acarreta em perda de perfomace. Você concorda que é fácil, sentido de performance e velocidade,
			trabalhar com a referência de algo do que o dado em si? Dessa maneira, somente é copiado o endereço
			do valor para a função

	Match, struct, and ref
		>>> 












	

https://nickymeuleman.netlify.app/garden/rust-expression-statement